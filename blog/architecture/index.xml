<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ESA Restclient – Architecture</title>
    <link>/blog/architecture/</link>
    <description>Recent content in Architecture on ESA Restclient</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/blog/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: The Architecture Of ESA RestClient</title>
      <link>/blog/2022/03/08/the-architecture-of-esa-restclient/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022/03/08/the-architecture-of-esa-restclient/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/img/architecture/esa_stack.png&#34; alt=&#34;esa_stack&#34;&gt;&lt;/p&gt;
&lt;p&gt;ESA Stack(Elastic Service Architecture) 是OPPO云计算中心孵化的技术品牌，致力于微服务相关技术栈，帮助用户快速构建高性能，高可用的云原生微服务。产品包含高性能Web服务框架、RPC框架、服务治理框架、注册中心、配置中心、调用链追踪系统，Service Mesh、Serverless等各类产品及研究方向。&lt;/p&gt;
&lt;p&gt;当前部分产品已经对外开源：&lt;/p&gt;
&lt;p&gt;开源主站：&lt;a href=&#34;https://www.esastack.io/&#34;&gt;https://www.esastack.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/esastack&#34;&gt;https://github.com/esastack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RestClient 项目地址：&lt;a href=&#34;https://github.com/esastack/esa-restclient&#34;&gt;https://github.com/esastack/esa-restclient&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RestClient 文档地址：&lt;a href=&#34;https://www.esastack.io/esa-restclient/&#34;&gt;https://www.esastack.io/esa-restclient&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎各路技术爱好者们加入，一同探讨学习与进步。&lt;/p&gt;
&lt;h1 id=&#34;esa-restclient&#34;&gt;ESA RestClient&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;ESA RestClient&lt;/code&gt; 是一个基于 Netty 的全链路异步事件驱动的高性能轻量级的HTTP客户端。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下简称RestClient&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-quick-start&#34;&gt;1. Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;step1添加依赖&#34;&gt;Step1：添加依赖&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.esastack&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;restclient&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step2--构建restclient并发送请求处理响应&#34;&gt;Step2:  构建RestClient并发送请求处理响应&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//快速创建RestClient，各项配置均为默认配置。
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;                                                  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//如果用户想自定义一些配置，则可以使用RestClient.create()来进行自定义配置。
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://127.0.0.1:8081/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello Server&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;            &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//设置请求体
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;                         &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//执行请求逻辑
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;thenAccept&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;         &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//异步处理响应
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;bodyToEntity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//调用response.bodyToEntity(Class TargetClass)来 Decode 响应，
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;                                                                         &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//TargetClass为期望的响应类型
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-功能特性&#34;&gt;2. 功能特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Http1/H2/H2cUpgrade/Https&lt;/li&gt;
&lt;li&gt;Encode 与  EncodeAdvice&lt;/li&gt;
&lt;li&gt;Decode 与 DecodeAdvice&lt;/li&gt;
&lt;li&gt;RestInterceptor&lt;/li&gt;
&lt;li&gt;大文件发送&lt;/li&gt;
&lt;li&gt;请求级别读超时&lt;/li&gt;
&lt;li&gt;请求级别重试&lt;/li&gt;
&lt;li&gt;请求级别重定向&lt;/li&gt;
&lt;li&gt;100-expect-continue&lt;/li&gt;
&lt;li&gt;Multipart&lt;/li&gt;
&lt;li&gt;Metrics&lt;/li&gt;
&lt;li&gt;more …&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21-encode-与--encodeadvice&#34;&gt;2.1 Encode 与  EncodeAdvice&lt;/h3&gt;
&lt;h4 id=&#34;211-encode&#34;&gt;2.1.1 Encode&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;RestClient&lt;/code&gt;会自动根据用户的 &lt;code&gt;Headers&lt;/code&gt; 与 &lt;code&gt;Entity&lt;/code&gt; 等选择合适的&lt;code&gt;Encoder&lt;/code&gt;进行&lt;code&gt;Encode&lt;/code&gt;。其内置了下面这些&lt;code&gt;Encoder&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Json
&lt;ul&gt;
&lt;li&gt;jackson(默认)&lt;/li&gt;
&lt;li&gt;fastjson&lt;/li&gt;
&lt;li&gt;gson&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ProtoBuf&lt;/li&gt;
&lt;li&gt;File&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;byte[]
除此之外&lt;code&gt;RestClient&lt;/code&gt;也支持用户自定义&lt;code&gt;Encoder&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2111-使用json-encoder&#34;&gt;2.1.1.1 使用Json Encoder&lt;/h4&gt;
&lt;p&gt;指定&lt;code&gt;contentType&lt;/code&gt;为&lt;code&gt;MediaType.APPLICATION_JSON&lt;/code&gt;，将自动使用&lt;code&gt;Json Encoder&lt;/code&gt;来对&lt;code&gt;Entity&lt;/code&gt;来进行&lt;code&gt;Encode&lt;/code&gt;。示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost:8080/path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;contentType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MediaType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;male&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2112-使用protobuf-encoder&#34;&gt;2.1.1.2 使用ProtoBuf Encoder&lt;/h4&gt;
&lt;p&gt;指定&lt;code&gt;contentType&lt;/code&gt;为&lt;code&gt;ProtoBufCodec.PROTO_BUF&lt;/code&gt;，且&lt;code&gt;Entity&lt;/code&gt;类型为&lt;code&gt;com.google.protobuf.Message&lt;/code&gt;的子类时，将自动使用&lt;code&gt;ProtoBuf Encoder&lt;/code&gt;来对&lt;code&gt;Entity&lt;/code&gt;来进行&lt;code&gt;Encode&lt;/code&gt;。示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost:8080/path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;contentType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ProtoBufCodec&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PROTO_BUF&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2113-使用file-encoder&#34;&gt;2.1.1.3 使用File Encoder&lt;/h4&gt;
&lt;p&gt;当&lt;code&gt;Entity&lt;/code&gt;类型为&lt;code&gt;File&lt;/code&gt;时，将自动使用&lt;code&gt;File Encoder&lt;/code&gt;来对&lt;code&gt;Entity&lt;/code&gt;来进行&lt;code&gt;Encode&lt;/code&gt;。示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost:8080/path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tem&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2114-自定义encoder&#34;&gt;2.1.1.4 自定义Encoder&lt;/h4&gt;
&lt;p&gt;当&lt;code&gt;RestClient&lt;/code&gt;内置的&lt;code&gt;Encoder&lt;/code&gt;无法满足用户需求时，用户可以自定义&lt;code&gt;Encoder&lt;/code&gt;，示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;StringEncoder&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ByteEncoder&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#5c35cc;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RequestContent&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;doEncode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EncodeContext&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MediaType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;contentType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RequestContent&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;StandardCharsets&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;));&lt;/span&gt;
            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RequestContent&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//该Encoder无法Encode这种类型，将Encode工作交给下一个Encoder
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用户可以将自定义的&lt;code&gt;Encoder&lt;/code&gt;直接绑定到请求或者Client上，同时也支持用户通过SPI的方式加载&lt;code&gt;Encoder&lt;/code&gt;，具体参见文档：《&lt;a href=&#34;https://restclient.esastack.io/docs/codec/encoder/#%E9%85%8D%E7%BD%AEencoder&#34;&gt;RestClient 配置Encoder&lt;/a&gt;》&lt;/p&gt;
&lt;h4 id=&#34;2115-encode执行时机&#34;&gt;2.1.1.5 Encode执行时机&lt;/h4&gt;
&lt;p&gt;见&lt;a href=&#34;https://restclient.esastack.io/docs/process_of_restclient/&#34;&gt;请求处理完整流程&lt;/a&gt;中的&lt;code&gt;Encoder&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;212-encodeadvice&#34;&gt;2.1.2 EncodeAdvice&lt;/h4&gt;
&lt;p&gt;用户可以通过&lt;code&gt;EncodeAdvice&lt;/code&gt;在&lt;code&gt;Encode&lt;/code&gt;前后插入业务逻辑，来对要&lt;code&gt;Encode&lt;/code&gt;的 &lt;code&gt;Entity&lt;/code&gt; 或者 &lt;code&gt;Encode&lt;/code&gt;后的&lt;code&gt;RequestContent&lt;/code&gt; 进行修改替换等操作。&lt;/p&gt;
&lt;h4 id=&#34;2121-示例&#34;&gt;2.1.2.1 示例&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;EncodeAdviceImpl&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;EncodeAdvice&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#5c35cc;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RequestContent&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;aroundEncode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EncodeAdviceContext&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//...before encode
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;RequestContent&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;requestContent&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//...after encode
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;requestContent&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用户可以将自定义的&lt;code&gt;EncodeAdvice&lt;/code&gt;直接绑定到Client上，同时也支持用户通过SPI的方式加载&lt;code&gt;EncodeAdvice&lt;/code&gt;，具体参见文档：《&lt;a href=&#34;https://restclient.esastack.io/docs/codec/encoder/#%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F&#34;&gt;RestClient 配置EncodeAdvice&lt;/a&gt;》&lt;/p&gt;
&lt;h4 id=&#34;2122-执行时机&#34;&gt;2.1.2.2 执行时机&lt;/h4&gt;
&lt;p&gt;见&lt;a href=&#34;https://restclient.esastack.io/docs/process_of_restclient/&#34;&gt;请求处理完整流程&lt;/a&gt;中的&lt;code&gt;EncodeAdvice&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;22-decode-与-decodeadvice&#34;&gt;2.2 Decode 与 DecodeAdvice&lt;/h3&gt;
&lt;h4 id=&#34;221-decode&#34;&gt;2.2.1 Decode&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;RestClient&lt;/code&gt;会自动根据用户的 &lt;code&gt;Headers&lt;/code&gt; 与 期望&lt;code&gt;Entity&lt;/code&gt;类型 等选择合适的&lt;code&gt;Decoder&lt;/code&gt;进行&lt;code&gt;Decode&lt;/code&gt;。&lt;code&gt;RestClient&lt;/code&gt;内置了下面这些&lt;code&gt;Decoder&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Json
&lt;ul&gt;
&lt;li&gt;jackson(默认)&lt;/li&gt;
&lt;li&gt;fastjson&lt;/li&gt;
&lt;li&gt;gson&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ProtoBuf&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;byte[]
除此之外&lt;code&gt;RestClient&lt;/code&gt;也支持用户自定义解码器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2211-使用json-decoder&#34;&gt;2.2.1.1 使用Json Decoder&lt;/h4&gt;
&lt;p&gt;当Response的&lt;code&gt;contentType&lt;/code&gt;为&lt;code&gt;MediaType.APPLICATION_JSON&lt;/code&gt;，将自动使用&lt;code&gt;Json Decoder&lt;/code&gt;来来进行&lt;code&gt;Decode&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost:8080/path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;thenAccept&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//当 MediaType.APPLICATION_JSON.equals(response.contentType()) 时将自动使用Json Decoder
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;              &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;bodyToEntity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;));&lt;/span&gt;
          &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
          &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2212-使用protobuf-decoder&#34;&gt;2.2.1.2 使用ProtoBuf Decoder&lt;/h4&gt;
&lt;p&gt;当Response的&lt;code&gt;contentType&lt;/code&gt;为&lt;code&gt;ProtoBufCodec.PROTO_BUF&lt;/code&gt;，且&lt;code&gt;response.bodyToEntity()&lt;/code&gt;传入的类型为&lt;code&gt;com.google.protobuf.Message&lt;/code&gt;的子类时，将自动使用&lt;code&gt;ProtoBuf Decoder&lt;/code&gt;来进行&lt;code&gt;Decode&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost:8080/path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;thenAccept&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//当 ProtoBufCodec.PROTO_BUF.equals(response.contentType())，且 Person 为 Message 的子类时，将自动使用ProtoBuf Decoder
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;              &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;bodyToEntity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;));&lt;/span&gt;
          &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
          &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2213-自定义decoder&#34;&gt;2.2.1.3 自定义Decoder&lt;/h4&gt;
&lt;p&gt;当&lt;code&gt;RestClient&lt;/code&gt;内置的&lt;code&gt;Decoder&lt;/code&gt;无法满足用户需求时，用户可以自定义&lt;code&gt;Decoder&lt;/code&gt;，示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;StringDecoder&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ByteDecoder&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#5c35cc;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;doDecode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DecodeContext&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;isAssignableFrom&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;targetType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用户可以将自定义的&lt;code&gt;Decoder&lt;/code&gt;直接绑定到请求或者Client上，同时也支持用户通过SPI的方式加载&lt;code&gt;Decoder&lt;/code&gt;，具体参见文档：《&lt;a href=&#34;https://restclient.esastack.io/docs/codec/decoder/#%E9%85%8D%E7%BD%AEdecoder&#34;&gt;RestClient 配置Decoder&lt;/a&gt;》&lt;/p&gt;
&lt;h4 id=&#34;2214-执行时机&#34;&gt;2.2.1.4 执行时机&lt;/h4&gt;
&lt;p&gt;见&lt;a href=&#34;https://restclient.esastack.io/docs/process_of_restclient/&#34;&gt;请求处理完整流程&lt;/a&gt;中的&lt;code&gt;Decoder&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;222-decodeadvice&#34;&gt;2.2.2 DecodeAdvice&lt;/h4&gt;
&lt;p&gt;用户可以通过&lt;code&gt;DecodeAdvice&lt;/code&gt;在&lt;code&gt;Decode&lt;/code&gt;前后进行来插入业务逻辑，来对要解码的 &lt;code&gt;ResponseContent&lt;/code&gt; 或者 &lt;code&gt;Decode&lt;/code&gt;后的对象 进行修改替换等操作。&lt;/p&gt;
&lt;h4 id=&#34;2221-示例&#34;&gt;2.2.2.1 示例&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DecodeAdviceImpl&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DecodeAdvice&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#5c35cc;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;aroundDecode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DecodeAdviceContext&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//...before decode
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;decoded&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//...after decode
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;decoded&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用户可以将自定义的&lt;code&gt;DecodeAdvice&lt;/code&gt;直接绑定到Client上，同时也支持用户通过SPI的方式加载&lt;code&gt;DecodeAdvice&lt;/code&gt;，具体参见文档：《&lt;a href=&#34;https://restclient.esastack.io/docs/codec/decoder/#%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F&#34;&gt;RestClient 配置DecodeAdvice&lt;/a&gt;》&lt;/p&gt;
&lt;h4 id=&#34;2222-执行时机&#34;&gt;2.2.2.2 执行时机&lt;/h4&gt;
&lt;p&gt;见&lt;a href=&#34;https://restclient.esastack.io/docs/process_of_restclient/&#34;&gt;请求处理完整流程&lt;/a&gt;中的&lt;code&gt;DecodeAdvice&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;23-restinterceptor&#34;&gt;2.3 RestInterceptor&lt;/h3&gt;
&lt;p&gt;用户可以使用&lt;code&gt;RestInterceptor&lt;/code&gt;在请求发送前和响应接收后来插入业务逻辑。&lt;code&gt;RestClient&lt;/code&gt;支持通过builder配置和SPI加载两种方式配置&lt;code&gt;RestInterceptor&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;231-builder配置&#34;&gt;2.3.1 Builder配置&lt;/h4&gt;
&lt;p&gt;在构造&lt;code&gt;RestClient&lt;/code&gt;时传入自定义的&lt;code&gt;RestInterceptor&lt;/code&gt;实例，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;addInterceptor&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Interceptor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;proceed&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;232-spi&#34;&gt;2.3.2 SPI&lt;/h4&gt;
&lt;h4 id=&#34;2321-普通spi&#34;&gt;2.3.2.1 普通SPI&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;RestClient&lt;/code&gt;支持通过SPI的方式加载&lt;code&gt;RestInterceptor&lt;/code&gt;接口的实现类，使用时只需要按照SPI的加载规则将自定义的&lt;code&gt;RestInterceptor&lt;/code&gt;放入指定的目录下即可。&lt;/p&gt;
&lt;h4 id=&#34;2322-restinterceptorfactory&#34;&gt;2.3.2.2 RestInterceptorFactory&lt;/h4&gt;
&lt;p&gt;如果用户自定义的&lt;code&gt;RestInterceptor&lt;/code&gt;对于不同&lt;code&gt;RestClient&lt;/code&gt;的配置有不同的实现，则用户可以实现&lt;code&gt;RestInterceptorFactory&lt;/code&gt;接口，并按照SPI的加载规则将自定义的&lt;code&gt;RestInterceptorFactory&lt;/code&gt;放入指定的目录下即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestInterceptorFactory&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;Collection&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RestInterceptor&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;interceptors&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RestClientOptions&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;clientOptions&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;RestClient&lt;/code&gt;构建时将调用&lt;code&gt;RestInterceptorFactory.interceptors(RestClientOptions clientOptions)&lt;/code&gt;，该方法返回的所有&lt;code&gt;RestInterceptor&lt;/code&gt;都将加入到构建好的&lt;code&gt;RestClient&lt;/code&gt;中。&lt;/p&gt;
&lt;h4 id=&#34;2323-执行时机&#34;&gt;2.3.2.3 执行时机&lt;/h4&gt;
&lt;p&gt;见&lt;a href=&#34;https://restclient.esastack.io/docs/process_of_restclient/&#34;&gt;请求处理完整流程&lt;/a&gt;中的&lt;code&gt;RestInterceptor&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;24-大文件发送&#34;&gt;2.4 大文件发送&lt;/h3&gt;
&lt;p&gt;当文件较小时，可通过直接将文件内容写入请求body来发送文件。但是当文件内容过大时，直接写入会有OOM风险。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，&lt;code&gt;RestClient&lt;/code&gt;借助底层的Netty使用&lt;code&gt;NIO&lt;/code&gt;以零拷贝的方式发送文件，避免了&lt;code&gt;OOM&lt;/code&gt;的同时又减少了数据的多次拷贝。&lt;/p&gt;
&lt;p&gt;用户只需要简单的接口调用便可使用该功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;entity&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://127.0.0.1:8081/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;entity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bigFile&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;))&lt;/span&gt;    
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;25-读超时&#34;&gt;2.5 读超时&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RestClient&lt;/code&gt;支持请求级别的读超时，同时也支持Client 级别的读超时。默认读超时为&lt;code&gt;6000L&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;251-client级别读超时&#34;&gt;2.5.1 Client级别读超时&lt;/h4&gt;
&lt;p&gt;Client级别的读超时将对该Client下的所有请求生效，具体配置方式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;readTimeout&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3000L&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;252-request级别读超时&#34;&gt;2.5.2 Request级别读超时&lt;/h4&gt;
&lt;p&gt;当Request设置了读超时，其数据将覆盖Client设置的读超时，具体配置方式如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://127.0.0.1:8081/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;readTimeout&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3000L&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;thenAccept&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;bodyToEntity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;));&lt;/span&gt; 
            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;26-重试&#34;&gt;2.6 重试&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RestClient&lt;/code&gt;支持请求级别的重试，同时也支持Client 级别的重试。&lt;/p&gt;
&lt;p&gt;默认情况下，&lt;code&gt;RestClient&lt;/code&gt;仅会对所有抛出连接异常的请求进行重试(防止服务端的服务为非幂等)，其中：最大重试次数为3（不包括原始请求），重试间隔时间为0。使用时，可以通过自定义&lt;code&gt;RetryOptions&lt;/code&gt;参数更改重试次数、重试条件、重试间隔时间等。&lt;/p&gt;
&lt;h4 id=&#34;261-client级别重试&#34;&gt;2.6.1 Client级别重试&lt;/h4&gt;
&lt;p&gt;Client级别的重试将对该Client下的所有 Request 生效，使用时，可以通过自定义&lt;code&gt;RetryOptions&lt;/code&gt;参数更改重试次数、重试条件、重试间隔时间等。具体配置方式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;retryOptions&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RetryOptions&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;maxRetries&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//设置每次重试的间隔时间
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;intervalMs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;retryCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;（&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;retryCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;）&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;3000L&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;    
                &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//判断是否要重试
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;predicate&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cause&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cause&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; 
                &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;())&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;connectionPoolSize&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2048&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;262-request级别重试&#34;&gt;2.6.2 Request级别重试&lt;/h4&gt;
&lt;p&gt;当Request设置了重试次数，其数据将覆盖Client设置的重试次数，具体配置方式如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://127.0.0.1:8081/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;maxRetries&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;thenAccept&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;bodyToEntity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;));&lt;/span&gt; 
            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;27-重定向&#34;&gt;2.7 重定向&lt;/h3&gt;
&lt;p&gt;默认情况下，&lt;code&gt;RestClient&lt;/code&gt;会对响应状态码为301，302，303，307，308的请求重定向，其中：最大重定向次数为5（不包含原始请求）。使用时，可以通过maxRedirects更新重定向次数或者禁用（maxRedirects=0）重定向功能。&lt;/p&gt;
&lt;h4 id=&#34;271-client设置重定向&#34;&gt;2.7.1 Client设置重定向&lt;/h4&gt;
&lt;p&gt;Client级别的重定向将对该Client下的所有 Request 生效，具体配置方式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;maxRedirects&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;272-request设置重定向覆盖client的设置&#34;&gt;2.7.2 Request设置重定向覆盖Client的设置&lt;/h4&gt;
&lt;p&gt;当Request设置了重定向次数，其数据将覆盖Client设置的重定向次数，具体配置方式如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RestClient&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;ofDefault&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://127.0.0.1:8081/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;maxRedirects&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;thenAccept&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;bodyToEntity&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;));&lt;/span&gt; 
            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;28-其它功能&#34;&gt;2.8 其它功能&lt;/h3&gt;
&lt;p&gt;如果用户想对&lt;code&gt;RestClient&lt;/code&gt;的功能有进一步了解，可以参考：《&lt;a href=&#34;https://restclient.esastack.io/docs/&#34;&gt;RestClient 功能文档&lt;/a&gt;》。&lt;/p&gt;
&lt;h2 id=&#34;3-性能表现&#34;&gt;3 性能表现&lt;/h2&gt;
&lt;h3 id=&#34;31-测试场景&#34;&gt;3.1 测试场景&lt;/h3&gt;
&lt;p&gt;服务端为一个Echo服务器，客户端分别使用&lt;code&gt;RestClient&lt;/code&gt;、&lt;code&gt;Apache HttpAsyncClient&lt;/code&gt; 、 &lt;code&gt;OK Httpclient&lt;/code&gt;均使用POST请求，请求体内容为固定字符串: OK，响应体内容也为固定字符串：OK。&lt;/p&gt;
&lt;h3 id=&#34;32-机器配置&#34;&gt;3.2 机器配置&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;OS&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;内存（G）&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;CPU核数&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Client&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CentOS Linux release 7.7.1908 (Core)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Server&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CentOS Linux release 7.7.1908 (Core)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;33-jvm参数&#34;&gt;3.3 JVM参数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-Xms1024m -Xmx1024m -XX:MetaspaceSize&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;128m -XX:MaxMetaspaceSize&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;256m -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;70&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;34-客户端版本&#34;&gt;3.4 客户端版本&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;客户端&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;RestClient&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Apache HttpAsyncClient&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;OK HttpClient&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;版本&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.0.0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.1.2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.9.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;35-测试方法&#34;&gt;3.5 测试方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如何测试异步客户端的性能&lt;/strong&gt;？这是我们在性能测试前要面对的第一个问题，下面是我们对于该问题的一些思考：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;能否for循环发起同步请求，同时使用多线程来达到框架的请求处理极限，并将该极限视为客户端的最佳TPS？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般来说，用户既然选择异步客户端，肯定大部分时间都会使用异步的方式去发起请求，使用同步方式进行测试的结果并不能代表异步时客户端的性能。&lt;strong&gt;因此对于异步客户端的用户而言，同步方式测试的最终结果并没有很大的参考价值&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此这种方式并不适合用来对异步客户端进行性能测试。
&lt;strong&gt;能否使用单线程for循环异步发起请求，直接将这个时候的TPS视为客户端的最佳TPS？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;异步客户端异步发起请求时，发起请求的方法返回的非常快(因为请求执行的过程主要在IO线程池中进行)。尽管只使用单线程，如果一直for循环异步发起请求，&lt;strong&gt;请求发起的速度也会比IO线程池处理请求的速度快得多&lt;/strong&gt;，这会导致大量请求在程序中的某个地方(如获取连接)堆积，从而导致程序报错，或性能低下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此这种方式也并不适合用来对异步客户端进行性能测试。
&lt;strong&gt;那么应该如何测试异步客户端的性能呢？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;异步客户端专为异步而生，用户既然选择异步客户端，肯定大部分时间都会使用异步的方式发起请求，因此对于异步客户端而言，使用异步的方式去测试其性能是一种更加合适的方式。&lt;/p&gt;
&lt;p&gt;问题的关键在于&lt;strong&gt;在测试过程中，如何避免过快地发起异步请求导致发起请求的速度超过框架的处理能力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要问题确定了，那么答案基本也就确定了。要避免过快地发起异步请求，我们可以&lt;strong&gt;想办法调整异步请求发起的速度&lt;/strong&gt;，对于调整异步请求的发起速度，我们可以尝试用以下两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for循环周期性地发送一定次数的异步请求后，sleep一会儿，然后再继续发起异步请求。我们可以通过 &lt;strong&gt;控制sleep的时间&lt;/strong&gt; 和 &lt;strong&gt;控制多少个请求间隔进行sleep&lt;/strong&gt;两个变量来控制异步请求的发起速率。&lt;/li&gt;
&lt;li&gt;for循环周期性地发送一定次数的异步请求后，发送一个同步请求，然后再继续发起异步请求。&lt;strong&gt;用同步请求去代替sleep的时间，该同步请求执行完恰好说明了请求队列中的请求都已经排队结束&lt;/strong&gt;。其实原理是相同的，但这样控制的变量更少一些，仅需要&lt;strong&gt;控制发起多少个异步请求后发起一次同步请求&lt;/strong&gt;(即：&lt;strong&gt;一个周期内异步请求次数与同步请求次数的比例&lt;/strong&gt;)。
上面两种方法都可以控制异步请求的发起速率，最终我们选择使用第二种方法来控制异步请求的发起速率，因为第二种方式需要控制的变量更少，这样我们的测试过程也会更加简单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此最终我们的测试方法为：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用异步与同步交替的方式来发起请求，不断调整一个周期内异步请求与同步请求的比例，在每个比例下调整客户端的各项配置，使其达到最佳的TPS，记录每个比例下，框架的最佳TPS，直到找到增加 异步请求与同步请求的比例 时，框架的TPS不再上升，甚至下降的拐点，该拐点即为框架的性能极限点。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;36-测试结果&#34;&gt;3.6 测试结果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/perf.png&#34; alt=&#34;perf&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中，横坐标为&lt;strong&gt;异步请求与同步请求的比例&lt;/strong&gt;，纵坐标为TPS，通过上图我们可以看出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RestClient&lt;/code&gt;：随着&lt;strong&gt;异步与同步请求比例&lt;/strong&gt;增大而先增大后减小，&lt;strong&gt;异步与同步请求比例&lt;/strong&gt;为800时，TPS最佳，为111217.98。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Apache HttpAsyncClient&lt;/code&gt;：随着&lt;strong&gt;异步与同步请求比例&lt;/strong&gt;增大而先增大后减小，&lt;strong&gt;异步与同步请求比例&lt;/strong&gt;为800时，TPS最佳，为 83962.54。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OK Httpclient&lt;/code&gt; ：随着&lt;strong&gt;异步与同步请求比例&lt;/strong&gt;增大而先增大后减小，&lt;strong&gt;异步与同步请求比例&lt;/strong&gt;为300 时，TPS最佳，为 70501.59。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;37-结论&#34;&gt;3.7 结论&lt;/h4&gt;
&lt;p&gt;RestClient在上面场景中最佳TPS 较 Apache HttpAsyncClient的最佳TPS高 32%，较OK Httpclient的最佳TPS高57% 。&lt;/p&gt;
&lt;h4 id=&#34;38-详细的测试数据&#34;&gt;3.8 详细的测试数据&lt;/h4&gt;
&lt;h4 id=&#34;381-restclient&#34;&gt;3.8.1 RestClient&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;异步与同步请求比例&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;RT&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;成功率&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;失败个数&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;maxrt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;minrt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;50rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;90rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;95rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;99rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;client cpu * load&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-1(仅同步)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6727.32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.15&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;164&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;96.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;50&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;72447.11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.43&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;190&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;291.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;87201.45&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.64&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;182&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;326.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;104129.04&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.38&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;258&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;370.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;107217.98&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.18&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;241&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;376.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;800&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;111217.98&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.88&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;261&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;373.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1000&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;99656.49&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.59&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;376&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;13&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;386.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;382-apache-httpasyncclient&#34;&gt;3.8.2 Apache HttpAsyncClient&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;异步与同步请求比例&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;RT&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;成功率&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;失败个数&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;maxrt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;minrt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;50rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;90rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;95rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;99rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;client cpu * load&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-1(仅同步)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8257.91&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;88&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;91.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;50&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;63515.9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;89&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;371.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;68515.9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.21&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;90&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;389.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;70133.2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.30&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;90&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;391.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;71101.49&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.37&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;89&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;393.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;800&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;83962.54&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.55&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;92&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;391.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1000&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;78786.09&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.78&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;108&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;394.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;383-ok-httpclient&#34;&gt;3.8.3 OK HttpClient&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;异步与同步请求比例&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;RT&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;成功率&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;失败个数&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;maxrt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;minrt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;50rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;90rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;95rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;99rt&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;client cpu * load&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-1(仅同步)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10063.36&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;82&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;106.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;50&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;60600.31&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.42&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;69&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;400.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;65527.59&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.73&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;67&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;400.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;70501.59&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.93&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;73&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;400.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;69633.59&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3.2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;101&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;22&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;400.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;800&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;65631.21&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3.6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;104&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;28&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;400.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1000&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;61633.31&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;112&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;38&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;400.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;4-架构设计&#34;&gt;4 架构设计&lt;/h2&gt;
&lt;h3 id=&#34;41-设计原则&#34;&gt;4.1 设计原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高性能&lt;/strong&gt;：持续不懈追求的目标 &amp;amp; 核心竞争力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高扩展性&lt;/strong&gt;：开放扩展点，满足业务多样化的需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全链路异步&lt;/strong&gt;：基于&lt;code&gt;CompletableStage&lt;/code&gt;提供完善的异步处理能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-结构设计&#34;&gt;4.2 结构设计&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/arc.png&#34; alt=&#34;arc&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图为&lt;code&gt;RestClient&lt;/code&gt;的结构图，我们由上到下依次介绍一下各个部分的含义：&lt;/p&gt;
&lt;h4 id=&#34;421-restinterceptorchain&#34;&gt;4.2.1 &lt;code&gt;RestInterceptorChain&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/interceptor.png&#34; alt=&#34;interceptor&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RestInterceptorChain&lt;/code&gt;为&lt;code&gt;RestInterceptor&lt;/code&gt;的集合，用户调用请求时，将依次经过&lt;code&gt;RestInterceptorChain&lt;/code&gt;中的所有&lt;code&gt;RestInterceptor&lt;/code&gt;。用户可以通过实现&lt;code&gt;RestInterceptor&lt;/code&gt;中的&lt;code&gt;getOrder()&lt;/code&gt;方法来指定其在&lt;code&gt;RestInterceptorChain&lt;/code&gt;中的排序。&lt;/p&gt;
&lt;h4 id=&#34;422-encodeadvicechain&#34;&gt;4.2.2 &lt;code&gt;EncodeAdviceChain&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/encode_advice.png&#34; alt=&#34;encode_advice&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EncodeAdviceChain&lt;/code&gt;为&lt;code&gt;EncodeAdvice&lt;/code&gt;的集合，在Encode前，将依次经过&lt;code&gt;EncodeAdviceChain&lt;/code&gt;中的所有&lt;code&gt;EncodeAdvice&lt;/code&gt;。用户可以通过实现&lt;code&gt;EncodeAdvice&lt;/code&gt;中的&lt;code&gt;getOrder()&lt;/code&gt;方法来指定其在&lt;code&gt;EncodeAdviceChain&lt;/code&gt;中的排序。&lt;/p&gt;
&lt;h4 id=&#34;423-encoderchain&#34;&gt;4.2.3 &lt;code&gt;EncoderChain&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/encoder.png&#34; alt=&#34;encoder&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EncoderChain&lt;/code&gt;为&lt;code&gt;Encoder&lt;/code&gt;的集合，在Encode时，将依次经过&lt;code&gt;EncoderChain&lt;/code&gt;中的所有&lt;code&gt;Encoder&lt;/code&gt;，直到某个&lt;code&gt;Encoder&lt;/code&gt;直接返回Encode的结果（即：其可以Encode该请求）。用户可以通过实现&lt;code&gt;Encoder&lt;/code&gt;中的&lt;code&gt;getOrder()&lt;/code&gt;方法来指定其在&lt;code&gt;EncoderChain&lt;/code&gt;中的排序。&lt;/p&gt;
&lt;h4 id=&#34;424-decodeadvicechain&#34;&gt;4.2.4 &lt;code&gt;DecodeAdviceChain&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/decode_advice.png&#34; alt=&#34;decode_advice&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DecodeAdviceChain&lt;/code&gt;为&lt;code&gt;DecodeAdvice&lt;/code&gt;的集合，在Decode前，将依次经过&lt;code&gt;DecodeAdviceChain&lt;/code&gt;中的所有&lt;code&gt;DecodeAdvice&lt;/code&gt;。用户可以通过实现&lt;code&gt;DecodeAdvice&lt;/code&gt;中的&lt;code&gt;getOrder()&lt;/code&gt;方法来指定其在&lt;code&gt;DecodeAdviceChain&lt;/code&gt;中的排序。&lt;/p&gt;
&lt;h4 id=&#34;425-decoderchain&#34;&gt;4.2.5 &lt;code&gt;DecoderChain&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/decoder.png&#34; alt=&#34;decoder&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DecoderChain&lt;/code&gt;为&lt;code&gt;Decoder&lt;/code&gt;的集合，在Decode时，将依次经过&lt;code&gt;DecoderChain&lt;/code&gt;中的所有&lt;code&gt;Decoder&lt;/code&gt;，直到某个&lt;code&gt;Decoder&lt;/code&gt;直接返回Decode的结果（即：其可以Decode该响应）。用户可以通过实现&lt;code&gt;Decoder&lt;/code&gt;中的&lt;code&gt;getOrder()&lt;/code&gt;方法来指定其在&lt;code&gt;DecoderChain&lt;/code&gt;中的排序。&lt;/p&gt;
&lt;h4 id=&#34;426-nettytransceiver&#34;&gt;4.2.6 &lt;code&gt;NettyTransceiver&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/netty_transceiver.png&#34; alt=&#34;netty_transceiver&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NettyTransceiver&lt;/code&gt; 是 &lt;code&gt;RestClient&lt;/code&gt;与其底层框架&lt;code&gt;Neety&lt;/code&gt;之间连接的桥梁，在介绍其之前，需要一些预备知识，我们先来简单介绍一下这些预备知识：&lt;/p&gt;
&lt;h4 id=&#34;4261-channel--channelpool-channelpools&#34;&gt;4.2.6.1 &lt;code&gt;Channel&lt;/code&gt; &amp;amp; &lt;code&gt;ChannelPool&lt;/code&gt; &amp;amp;&lt;code&gt;ChannelPools&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Channel&lt;/code&gt; ： &lt;code&gt;Channel&lt;/code&gt;是Netty网络操作抽象类，它聚合了一组功能，包括但不限于网络的读、写，客户端发起连接、主动关闭连接，链路关闭，获得通信双方的网络地址等。它也包含了Netty框架相关的一些功能，包括获取该&lt;code&gt;Channel&lt;/code&gt;的&lt;code&gt;EventLoop&lt;/code&gt;,获取缓冲分配器&lt;code&gt;ByteBufAllocator&lt;/code&gt;和&lt;code&gt;pipeline&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ChannelPool&lt;/code&gt;：&lt;code&gt;ChannelPool&lt;/code&gt;用于缓存&lt;code&gt;Channel&lt;/code&gt;，它允许获取和释放&lt;code&gt;Channel&lt;/code&gt;，并充当这些&lt;code&gt;Channel&lt;/code&gt;的池，从而达到复用&lt;code&gt;Channel&lt;/code&gt;的目的。在&lt;code&gt;RestClient&lt;/code&gt;中，每一个&lt;code&gt;Server host&lt;/code&gt;对应一个&lt;code&gt;ChannelPool&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ChannelPools&lt;/code&gt;：&lt;code&gt;ChannelPools&lt;/code&gt;用于缓存&lt;code&gt;ChannelPool&lt;/code&gt;。在&lt;code&gt;RestClient&lt;/code&gt;中，当一个&lt;code&gt;Server host&lt;/code&gt;长时间没有被访问时，其所对应的&lt;code&gt;ChannelPool&lt;/code&gt;将会被视作缓存过期，从而被回收资源。&lt;/p&gt;
&lt;h4 id=&#34;4262-eventloop--eventloopgroup&#34;&gt;4.2.6.2 &lt;code&gt;EventLoop&lt;/code&gt; &amp;amp; &lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;EventLoop&lt;/code&gt;：&lt;code&gt;EventLoop&lt;/code&gt;在Netty中被用来运行任务来处理在&lt;code&gt;Channel&lt;/code&gt;的生命周期内发生的事件。在&lt;code&gt;RestClient&lt;/code&gt;中，一个&lt;code&gt;EventLoop&lt;/code&gt;对应了一个线程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;：&lt;code&gt;EventLoopGroup&lt;/code&gt;为一组&lt;code&gt;EventLoop&lt;/code&gt;，其保证将多个任务尽可能地均匀地分配在多个&lt;code&gt;EventLoop&lt;/code&gt;上。&lt;/p&gt;
&lt;h4 id=&#34;4263-epoll&#34;&gt;4.2.6.3 &lt;code&gt;Epoll&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Epoll&lt;/code&gt;是Linux内核的可扩展I/O事件通知机制，包含下面这三个系统调用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;int epoll_create(int size);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在内核中创建&lt;code&gt;epoll&lt;/code&gt;实例并返回一个&lt;code&gt;epoll&lt;/code&gt;文件描述符(对应上图中 &lt;code&gt;EpollEventLoop&lt;/code&gt;中的&lt;code&gt;epollFD&lt;/code&gt;)。 在最初的实现中，调用者通过 &lt;code&gt;size&lt;/code&gt; 参数告知内核需要监听的文件描述符数量。如果监听的文件描述符数量超过 &lt;code&gt;size&lt;/code&gt;, 则内核会自动扩容。而现在 &lt;code&gt;size&lt;/code&gt; 已经没有这种语义了，但是调用者调用时 &lt;code&gt;size&lt;/code&gt; 依然必须大于 0，以保证后向兼容性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;向 &lt;code&gt;epfd&lt;/code&gt; 对应的内核&lt;code&gt;epoll&lt;/code&gt; 实例添加、修改或删除对 &lt;code&gt;fd&lt;/code&gt; 上事件 &lt;code&gt;event&lt;/code&gt; 的监听。&lt;code&gt;op&lt;/code&gt; 可以为 &lt;code&gt;EPOLL_CTL_ADD&lt;/code&gt;, &lt;code&gt;EPOLL_CTL_MOD&lt;/code&gt;, &lt;code&gt;EPOLL_CTL_DEL&lt;/code&gt; 分别对应的是添加新的事件，修改文件描述符上监听的事件类型，从实例上删除一个事件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 timeout 为 0 时，epoll_wait 永远会立即返回。而 timeout 为 -1 时，epoll_wait 会一直阻塞直到任一已注册的事件变为就绪。当 timeout 为一正整数时，epoll 会阻塞直到计时 timeout 毫秒终了或已注册的事件变为就绪。因为内核调度延迟，阻塞的时间可能会略微超过 timeout 毫秒。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Epoll&lt;/code&gt;&lt;strong&gt;运作流程:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程先通过调用&lt;code&gt;epoll_create&lt;/code&gt;来创建一个&lt;code&gt;epoll&lt;/code&gt;文件描述符(对应上图中 &lt;code&gt;EpollEventLoop&lt;/code&gt;中的&lt;code&gt;epollFD&lt;/code&gt;)。&lt;code&gt;epoll&lt;/code&gt;通过&lt;code&gt;mmap&lt;/code&gt;开辟一块共享空间，该共享空间中包含一个红黑树和一个链表(对应上图&lt;code&gt;epollFD&lt;/code&gt;中对应的&lt;code&gt;Shared space&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;进程调用&lt;code&gt;epoll&lt;/code&gt;的&lt;code&gt;epoll_ctl add&lt;/code&gt;，把新来的链接的文件描述符放入红黑树中。&lt;/li&gt;
&lt;li&gt;当红黑树中的&lt;code&gt;fd&lt;/code&gt;有数据到了，就把它放入一个链表中并维护该数据可写还是可读。&lt;/li&gt;
&lt;li&gt;上层用户空间(通过&lt;code&gt;epoll``_``wait&lt;/code&gt;)从链表中取出所有&lt;code&gt;fd&lt;/code&gt;，然后对其进行读写数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;4264-nettytransceiver初始化&#34;&gt;4.2.6.4 &lt;code&gt;NettyTransceiver&lt;/code&gt;初始化&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/init_netty_transceiver.png&#34; alt=&#34;init_netty_transceiver&#34;&gt;&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;RestClient&lt;/code&gt;刚完成初始化时，&lt;code&gt;NettyTransceiver&lt;/code&gt;也刚完成初始化，其初始化主要包含下面两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化 &lt;code&gt;ChannelPools&lt;/code&gt;，刚初始化的&lt;code&gt;ChannelPools&lt;/code&gt;为空，其内部不含有任何&lt;code&gt;ChannelPool&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;初始化&lt;code&gt;EpoolEventLoopGroup&lt;/code&gt;，&lt;code&gt;EpoolEventLoopGroup&lt;/code&gt;包含多个&lt;code&gt;EpoolEventLoop&lt;/code&gt;。每个&lt;code&gt;EpoolEventLoop&lt;/code&gt;都包含下面这三个部分：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;executor&lt;/code&gt;：真正执行任务的线程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taskQueue&lt;/code&gt;：任务队列，用户要执行的任务将被加入到该队列中，然后再被&lt;code&gt;executor&lt;/code&gt;执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epollFD&lt;/code&gt;：&lt;code&gt;epoll&lt;/code&gt;的文件描述符，在&lt;code&gt;EpoolEventLoop&lt;/code&gt;创建时，调用&lt;code&gt;epoll_create&lt;/code&gt;来创建一个&lt;code&gt;epoll&lt;/code&gt;的共享空间，其对应的文件描述符就是&lt;code&gt;epollFD&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4265-nettytransceiver发送请求&#34;&gt;4.2.6.5 &lt;code&gt;NettyTransceiver&lt;/code&gt;发送请求&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/send_request.png&#34; alt=&#34;send_request&#34;&gt;&lt;/p&gt;
&lt;p&gt;当第一次发送请求时：&lt;code&gt;NettyTransceiver&lt;/code&gt;将会为该&lt;code&gt;Server host&lt;/code&gt;创建一个&lt;code&gt;ChannelPool&lt;/code&gt;（如上图中的&lt;code&gt;ChannelPool1&lt;/code&gt;），并缓存到&lt;code&gt;channelPools&lt;/code&gt;中（默认10分钟内该&lt;code&gt;Server host&lt;/code&gt;没有请求则视为缓存过期，其对应的&lt;code&gt;ChannelPool&lt;/code&gt;将被从&lt;code&gt;channelPools&lt;/code&gt;中删除）。&lt;code&gt;ChannelPool&lt;/code&gt;在初始化时，主要包含下面两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;初始化&lt;code&gt;channelDeque&lt;/code&gt;，用于缓存&lt;code&gt;channel&lt;/code&gt;，获取&lt;code&gt;channel&lt;/code&gt;就是从&lt;code&gt;channelDeque&lt;/code&gt;中拿出一个&lt;code&gt;channel&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;Event``LoopGroup&lt;/code&gt;中选定一个&lt;code&gt;Event``Loop&lt;/code&gt;作为&lt;code&gt;executor&lt;/code&gt;，该&lt;code&gt;executor&lt;/code&gt;用来执行获取连接等操作。之所以&lt;code&gt;ChannelPool&lt;/code&gt;需要一个固定的&lt;code&gt;executor&lt;/code&gt;来执行获取连接等操作，是为了避免出现多个线程同时获取连接的情况，从而不需要对获取连接的操作进行加锁。
&lt;code&gt;ChannelPool&lt;/code&gt;初始化完成后，则将由&lt;code&gt;executor&lt;/code&gt;从&lt;code&gt;ChannelPool&lt;/code&gt;中获取&lt;code&gt;channel&lt;/code&gt;，初次获取时，由于&lt;code&gt;ChannelPool&lt;/code&gt;中还没有&lt;code&gt;channel&lt;/code&gt;，则将初始化第一个&lt;code&gt;channel&lt;/code&gt;，&lt;code&gt;channel&lt;/code&gt;的初始化步骤主要包含下面几步：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建连接，将连接封装为&lt;code&gt;channel&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将&lt;code&gt;channel&lt;/code&gt;对应的连接通过&lt;code&gt;epoll_ctl add&lt;/code&gt;方法加入到&lt;code&gt;EpollEventLoopGroup&lt;/code&gt;中的一个&lt;code&gt;EpollEventLoop&lt;/code&gt;的&lt;code&gt;epollFD&lt;/code&gt;对应的共享空间的红黑树中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将&lt;code&gt;channel&lt;/code&gt;放到对应&lt;code&gt;ChannelPool&lt;/code&gt;的&lt;code&gt;channelDeque&lt;/code&gt;中。
初始化&lt;code&gt;channel&lt;/code&gt;完成后，&lt;code&gt;executor&lt;/code&gt;则将初始化好的&lt;code&gt;channel&lt;/code&gt;返回，由绑定该&lt;code&gt;channel&lt;/code&gt;的&lt;code&gt;EpollEventLoop&lt;/code&gt;(即初始化&lt;code&gt;channel&lt;/code&gt;第二步中所选定的&lt;code&gt;EpollEventLoop&lt;/code&gt;)继续执行发送请求数据的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4266-nettytransceiver接收响应&#34;&gt;4.2.6.6 &lt;code&gt;NettyTransceiver&lt;/code&gt;接收响应&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/receive_data.png&#34; alt=&#34;receive_data&#34;&gt;&lt;/p&gt;
&lt;p&gt;当服务端发送响应时，操作系统将把epollFD对应的共享空间中红黑树中连接的fd移动到链表中，这时当EpollEventLoop调用epoll_wait命令时，将会获取到准备好的fd，从而获取到准备好的channel，最终通过读取并解码 channel 中的数据来完成response的解析。&lt;/p&gt;
&lt;h4 id=&#34;427-线程模型&#34;&gt;4.2.7 线程模型&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/thread_model.png&#34; alt=&#34;thread_model&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4271-线程模型的进一步优化&#34;&gt;4.2.7.1 线程模型的进一步优化&lt;/h4&gt;
&lt;p&gt;上面的线程模型为我们当前版本的线程模型，也是Netty自带连接池的线程模型。但是这种线程模型的性能一定是最高的吗?&lt;/p&gt;
&lt;p&gt;这个问题的答案应该是否定的，因为尽管 &lt;code&gt;ChannelPool&lt;/code&gt; 中指定一个 &lt;code&gt;EventLoop&lt;/code&gt; 作为 &lt;code&gt;executor&lt;/code&gt; 来执行获取 &lt;code&gt;Channel&lt;/code&gt; 的操作可以使得 获取&lt;code&gt;Channel&lt;/code&gt; 的过程无多线程争抢，但是却引入了下面这两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获取&lt;code&gt;Channel&lt;/code&gt;到&lt;code&gt;Channel.write()&lt;/code&gt;之间&lt;strong&gt;大概率&lt;/strong&gt;会进行一次&lt;code&gt;EventLoop&lt;/code&gt; 切换 (有可能会将 获取&lt;code&gt;Channel&lt;/code&gt; 与 &lt;code&gt;Channel.write()&lt;/code&gt; 分配到同一个&lt;code&gt;EventLoop&lt;/code&gt; ，如果分配到同一个&lt;code&gt;EventLoop&lt;/code&gt;，则不需要进行&lt;code&gt;EventLoop&lt;/code&gt; 切换 ，所以这里说&lt;strong&gt;大概率会切换&lt;/strong&gt;),这次切换是有一定的性能成本的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;中的 &lt;code&gt;EventLoop&lt;/code&gt;任务分配不均匀。因为&lt;code&gt;channelPool&lt;/code&gt;中获取连接的那个 &lt;code&gt;EventLoop&lt;/code&gt;在获取连接的同时还要处理数据的收发，比其他&lt;code&gt;EventLoop&lt;/code&gt;多做一些工作，该&lt;code&gt;EventLoop&lt;/code&gt;也成为了性能瓶颈点。在我们实际测试当中，也的确发现有一个&lt;code&gt;EventLoop&lt;/code&gt;的线程CPU利用率较其它&lt;code&gt;EventLoop&lt;/code&gt;更高一些。
那么更优越的线程模型是怎样的呢？通过上面的分析，我们觉得它应该要满足下面两点：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取&lt;code&gt;Channel&lt;/code&gt; 到 &lt;code&gt;Channel.write()&lt;/code&gt; 之间无线程切换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个&lt;code&gt;EventLoop&lt;/code&gt;的任务分配均匀。
基于我们的需求，我们可以得出最佳的结构模型与线程模型应该为下面这种：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优化后的结构模型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/optimized_arch.png&#34; alt=&#34;optimized_arch&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示：一个 &lt;code&gt;ChannelPool&lt;/code&gt; 由多个 &lt;code&gt;ChildChannelPool&lt;/code&gt; 构成（个数 = IO线程个数），一个&lt;code&gt;ChildChannelPool&lt;/code&gt;与一个 &lt;code&gt;EventLoopGroup&lt;/code&gt;绑定，该&lt;code&gt;EventLoopGroup&lt;/code&gt;仅含有一个 &lt;code&gt;EventLoop&lt;/code&gt; (即&lt;strong&gt;一个&lt;/strong&gt;&lt;code&gt;ChildChannelPool&lt;/code&gt;&lt;strong&gt;对应一个&lt;/strong&gt;&lt;code&gt;EventLoop&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优化后的线程模型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/optimized_thread_model.png&#34; alt=&#34;optimized_thread_model&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示：先在业务线程中执行一些操作并获取 &lt;code&gt;ChannelPool&lt;/code&gt; ，及选取一个 &lt;code&gt;ChildChannelPool&lt;/code&gt; (选取的实现类似于 &lt;code&gt;EventLoopGroup.next()&lt;/code&gt;实现，其保证了&lt;code&gt;ChildChannelPool&lt;/code&gt; 的均匀分配)，然后通过 &lt;code&gt;ChildChannelPool&lt;/code&gt;来获取 &lt;code&gt;Channel&lt;/code&gt; (该过程在&lt;code&gt;ChildChannelPool&lt;/code&gt; 对应的 &lt;code&gt;EventLoop&lt;/code&gt;中执行)，然后调用&lt;code&gt;Channel.write()&lt;/code&gt; (该过程也在&lt;code&gt;ChildChannelPool&lt;/code&gt; 对应的 &lt;code&gt;EventLoop&lt;/code&gt; 中执行) 。&lt;/p&gt;
&lt;p&gt;上述过程巧妙的达成了我们一开始所需要的高性能线程模型的两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取&lt;code&gt;Channel&lt;/code&gt; 到 &lt;code&gt;Channel.write()&lt;/code&gt; 之间无线程切换 —— 由于&lt;code&gt;ChildChannelPool&lt;/code&gt; 中的&lt;code&gt;EventLoopGroup&lt;/code&gt; 仅有一个&lt;code&gt;EventLoop&lt;/code&gt; ，其创建的&lt;code&gt;Channel&lt;/code&gt; 也只能绑定该&lt;code&gt;EventLoop&lt;/code&gt; ，因此获取&lt;code&gt;Channel&lt;/code&gt; 与&lt;code&gt;Channel.write()&lt;/code&gt;都只能在该&lt;code&gt;EventLoop&lt;/code&gt; 种执行，从而没有了线程切换。&lt;/li&gt;
&lt;li&gt;每 个 &lt;code&gt;EventLoop&lt;/code&gt;任务分配均匀 —— 由于&lt;code&gt;ChildChannelPool&lt;/code&gt; 是被均匀地从 &lt;code&gt;ChannelPool&lt;/code&gt;  中获取的（该过程与&lt;code&gt;EventLoopGroup.next()&lt;/code&gt; 的过程类似），而一个&lt;code&gt;ChildChannelPool&lt;/code&gt;  刚好对应了一个&lt;code&gt;EventLoop&lt;/code&gt; ，从而使得请求任务被均匀分配。
实践中我们也通过一个Demo进行了测试：&lt;strong&gt;发现采用上面这种线程模型与结构模型，使得&lt;/strong&gt;&lt;code&gt;RestClient&lt;/code&gt;&lt;strong&gt;的性能在当前版本的基础上又提升了20%左右&lt;/strong&gt;。预计下个版本中&lt;code&gt;RestClient&lt;/code&gt;将会提供上面这种线程模型与结构模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-其它性能优化的一些设计&#34;&gt;5 其它性能优化的一些设计&lt;/h2&gt;
&lt;h3 id=&#34;51-netty&#34;&gt;5.1 Netty&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RestClient&lt;/code&gt;基于Netty编写，Netty自带的一些高性能特性自然是&lt;code&gt;RestClient&lt;/code&gt;高性能的基石，Netty常见特性均在&lt;code&gt;RestClient&lt;/code&gt;中有所运用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Epoll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Channel&lt;/code&gt; &amp;amp; &lt;code&gt;ChannelPool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EventLoop&lt;/code&gt;&amp;amp; &lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ByteBuf&lt;/code&gt; &amp;amp; &lt;code&gt;PooledByteBufAllocator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FastThreadLocal&lt;/code&gt; &amp;amp;&lt;code&gt;InternalThreadLocalMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;
其中：&lt;code&gt;Epoll&lt;/code&gt;、 &lt;code&gt;Channel&lt;/code&gt; &amp;amp; &lt;code&gt;ChannelPool&lt;/code&gt;、&lt;code&gt;EventLoop&lt;/code&gt;&amp;amp; &lt;code&gt;EventLoopGroup&lt;/code&gt; 我们在该篇文档的&lt;code&gt;结构设计&lt;/code&gt;部分已经有过讲解，这里不再对其做过多解释，下面我们主要来看看其它几个部分：&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;511-bytebuf--pooledbytebufallocator&#34;&gt;5.1.1 &lt;code&gt;ByteBuf&lt;/code&gt; &amp;amp; &lt;code&gt;PooledByteBufAllocator&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Netty使用了即易于使用又具备良好性能的&lt;code&gt;ByteBuf&lt;/code&gt;来替代&lt;code&gt;ByteBuffer&lt;/code&gt;。这里不对&lt;code&gt;ByteBuf&lt;/code&gt;进行详细的介绍，主要简单介绍&lt;code&gt;RestClient&lt;/code&gt;中如何利用&lt;code&gt;ByteBuf&lt;/code&gt;来提高性能以获得更好地用户体验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送请求时，使用&lt;code&gt;PooledByteBufAllocator&lt;/code&gt;来分配&lt;code&gt;ByteBuf&lt;/code&gt;，其池化了&lt;code&gt;ByteBuf&lt;/code&gt;的实例以提高性能并最大限度地减少内存碎片。&lt;/li&gt;
&lt;li&gt;接收响应时，使用&lt;code&gt;CompositeByteBuf&lt;/code&gt;，它提供了一个将多个缓冲区表示为单个合并缓冲区的虚拟表示，减少了当响应分批次到来时聚合响应产生的不必要地数据拷贝。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;512-future--promise&#34;&gt;5.1.2 &lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt; 为Netty异步的基石，这里不对&lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt; 进行详细的介绍，主要介绍&lt;code&gt;RestClient&lt;/code&gt;中对于&lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt; 一些相关的技术上取舍。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RestClient&lt;/code&gt;利用&lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt;来实现数据包收发时的异步，并在面向用户时将&lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt;转化成&lt;code&gt;CompletionStage&lt;/code&gt;。由此实现了从数据包收发 到用户编解码的整个请求链路的异步化。&lt;/p&gt;
&lt;h4 id=&#34;513-whycompletionstagenot-future--promise&#34;&gt;5.1.3 Why&lt;code&gt;CompletionStage&lt;/code&gt;，Not &lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt;？&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;CompletionStage&lt;/code&gt;是Java8新增的一个接口，用于异步执行中的阶段处理，其大量用在Lambda表达式计算过程中，目前只有&lt;code&gt;CompletableFuture&lt;/code&gt;一个实现类。&lt;/p&gt;
&lt;p&gt;比起Netty的&lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt;，Java开发者更加熟悉&lt;code&gt;CompletionStage&lt;/code&gt;，且&lt;code&gt;CompletionStage&lt;/code&gt;的接口功能也更加强大，用户可以借其更加灵活地实现业务逻辑。&lt;/p&gt;
&lt;h4 id=&#34;514-why-completionstagenot-completablefuture&#34;&gt;5.1.4 Why &lt;code&gt;CompletionStage&lt;/code&gt;，Not &lt;code&gt;CompletableFuture&lt;/code&gt;？&lt;/h4&gt;
&lt;p&gt;之所以使用&lt;code&gt;CompletionStage&lt;/code&gt;而不使用&lt;code&gt;CompletableFuture&lt;/code&gt;。是因为 &lt;code&gt;CompletionStage&lt;/code&gt; 是接口，而&lt;code&gt;CompletableFuture&lt;/code&gt;为 &lt;code&gt;CompletionStage&lt;/code&gt; 的实现，使用 &lt;code&gt;CompletionStage&lt;/code&gt; 更符合&lt;strong&gt;面向接口编程&lt;/strong&gt;的原则。同时用户也可以使用&lt;code&gt;CompletionStage.toCompletableFuture()&lt;/code&gt;来将&lt;code&gt;CompletionStage&lt;/code&gt;转化为&lt;code&gt;CompletableFuture&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;515-how-to-combine-future--promise-with-completionstage&#34;&gt;5.1.5 How To Combine &lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt; With &lt;code&gt;CompletionStage&lt;/code&gt;？&lt;/h4&gt;
&lt;p&gt;在用户调用请求发送时，我们构建了一个&lt;code&gt;CompletionStage&lt;/code&gt;，并在执行Netty处理请求与响应逻辑返回的&lt;code&gt;Future&lt;/code&gt;中增加&lt;code&gt;Listener&lt;/code&gt;，在该&lt;code&gt;Listener&lt;/code&gt;中结束&lt;code&gt;CompletionStage&lt;/code&gt;。通过这样实现了将 &lt;code&gt;Future&lt;/code&gt; &amp;amp; &lt;code&gt;Promise&lt;/code&gt; 与 &lt;code&gt;CompletionStage&lt;/code&gt;  结合，从而实现整个请求链路的异步化。&lt;/p&gt;
&lt;p&gt;对这块感兴趣的用户可以查看&lt;code&gt;io.esastack.httpclient.core.netty.HttpTransceiverImpl&lt;/code&gt;中的&lt;code&gt;handle()&lt;/code&gt;方法，该方法中完成了 &lt;code&gt;Future&lt;/code&gt;到&lt;code&gt;CompletionStage&lt;/code&gt;的转化。&lt;/p&gt;
&lt;h4 id=&#34;516-fastthreadlocalinternalthreadlocalmap&#34;&gt;5.1.6 &lt;code&gt;FastThreadLocal&lt;/code&gt;&amp;amp;&lt;code&gt;InternalThreadLocalMap&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;FastThreadLocal&lt;/code&gt;通过将&lt;code&gt;ThreadLocal&lt;/code&gt;中使用哈希结构的&lt;code&gt;ThreadLocalMap&lt;/code&gt;改为了直接使用数组结构的&lt;code&gt;InternalThreadLocalMap&lt;/code&gt;。&lt;code&gt;ThreadLocal&lt;/code&gt;与&lt;code&gt;FastThreadLocal&lt;/code&gt;结构图大致如下：&lt;/p&gt;
&lt;h4 id=&#34;threadlocal结构图&#34;&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;结构图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/thread_local.png&#34; alt=&#34;thread_local&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;fastthreadlocal结构图&#34;&gt;&lt;code&gt;FastThreadLocal&lt;/code&gt;结构图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/img/architecture/fast_thread_local.png&#34; alt=&#34;fast_thread_local&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，比起&lt;code&gt;ThreadLocalMap&lt;/code&gt;，&lt;code&gt;InternalThreadLocalMap&lt;/code&gt;直接根据 index 来获取值、设置值的做法更加简单，且直接使用数组的复杂度更低（虽然 &lt;code&gt;ThreadLocalMap&lt;/code&gt;也是数组结构，但是其在数组的存取操作外还封装了大量hash计算以及防止hash碰撞的相关操作）。因此&lt;code&gt;FastThreadLocal&lt;/code&gt;获得了更高的性能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RestClient&lt;/code&gt;中均使用&lt;code&gt;FastThreadLocal&lt;/code&gt;代替&lt;code&gt;ThreadLocal&lt;/code&gt;以获取更高的性能。&lt;/p&gt;
&lt;h3 id=&#34;52-encode--decode&#34;&gt;5.2 Encode &amp;amp; Decode&lt;/h3&gt;
&lt;p&gt;与大多数Http客户端框架不同，&lt;code&gt;RestClient&lt;/code&gt;不仅支持将Java对象&lt;code&gt;Encode&lt;/code&gt;成&lt;code&gt;byte[]&lt;/code&gt;，还支持将Java对象&lt;code&gt;Encode&lt;/code&gt;成其他底层Netty支持的对象，如：&lt;code&gt;File&lt;/code&gt;、&lt;code&gt;MultipartBody&lt;/code&gt;等，未来还将会支持&lt;code&gt;ChunkInput&lt;/code&gt;用来支持将请求体比较大的请求分块发送。&lt;/p&gt;
&lt;p&gt;之所以这么设计，是因为如果我们仅仅支持将Java对象&lt;code&gt;Encode&lt;/code&gt;成&lt;code&gt;byte[]&lt;/code&gt;，那么当&lt;code&gt;Encode&lt;/code&gt;后的&lt;code&gt;byte[]&lt;/code&gt;数据过大时，将会出现&lt;code&gt;OutOfMemoryException&lt;/code&gt;。用户在发送大文件或者本身请求体较大的请求时，都会出现这个问题。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，&lt;code&gt;RestClient&lt;/code&gt;通过让用户可以将Java对象&lt;code&gt;Encode&lt;/code&gt;成&lt;code&gt;File&lt;/code&gt;或者&lt;code&gt;ChunkInput&lt;/code&gt;来解决这一类问题。当用户将Java对象&lt;code&gt;Encode&lt;/code&gt;成&lt;code&gt;File&lt;/code&gt;时，&lt;code&gt;RestClient&lt;/code&gt;将会借助底层的Netty使用&lt;code&gt;NIO&lt;/code&gt;以零拷贝的方式发送文件，避免了&lt;code&gt;OOM&lt;/code&gt;的同时又减少了数据的多次拷贝。&lt;/p&gt;
&lt;p&gt;同理当用户将Java对象&lt;code&gt;Encode&lt;/code&gt;成&lt;code&gt;ChunkInput&lt;/code&gt;时，&lt;code&gt;RestClient&lt;/code&gt;将会分块发送数据，避免数据一次性全部加载进内存，从而避免&lt;code&gt;OOM&lt;/code&gt;的情况。（PS：&lt;code&gt;ChunkInput&lt;/code&gt;当前版本暂不支持，但已留出扩展点，将在下一版本支持）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Decode&lt;/code&gt;时也做了同样的优化，由于原理相同这里就不再展开讲解了。&lt;/p&gt;
&lt;h2 id=&#34;6-结语&#34;&gt;6. 结语&lt;/h2&gt;
&lt;p&gt;尽管&lt;code&gt;RestClient&lt;/code&gt;主要只涉及发起请求这个简单的功能，但是“麻雀虽小，五脏俱全”，它考虑到了性能优化的方方面面，同时在 接口设计、代码整洁、功能完善 几个方面上也尽量做到了毫不妥协。&lt;/p&gt;
&lt;p&gt;它还是一个年轻的项目，欢迎各路技术爱好者们加入，一同探讨学习与进步。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
